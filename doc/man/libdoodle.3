.TH LIBDOODLE 3 "Jan 1 2010" "libdoodle"

.SH "NAME"
libdoodle \- multi\-suffix tree based file search library 0.7.0

.SH "SYNOPSIS"

\fB#include <doodle.h>


 \fBtypedef void (*DOODLE_Logger)(void * \fIcontext\fB, unsigned int \fIlevel\fB, const char * \fImessage\fB, ...);

 \fBtypedef struct {
   \fBchar * \fIfilename\fB;
   \fBunsigned int \fImod_time\fB;
 \fB} DOODLE_FileInfo;

 \fBtypedef void (*DOODLE_TreeCallback)(const DOODLE_FileInfo * \fIfileinfo\fB, void * \fIarg\fB);

 \fBunsigned int DOODLE_getFileCount(const struct DOODLE_SuffixTree \fI* tree\fB);

 \fBconst DOODLE_File * DOODLE_getFileAt(const struct DOODLE_SuffixTree \fI* tree\fB, unsigned int \fIindex\fB);

 \fBstruct DOODLE_SuffixTree * DOODLE_tree_create(DOODLE_Logger \fIlog\fB, void * \fIcontext\fB, const char * \fIdatabase\fB);

 \fBvoid DOODLE_tree_set_memory_limit(struct DOODLE_SuffixTree \fI*tree\fB, size_t limit);

 \fBvoid DOODLE_tree_destroy(struct DOODLE_SuffixTree \fI* tree\fB);

 \fBint DOODLE_tree_expand(struct DOODLE_SuffixTree \fI* tree\fB, const unsigned char * \fIsearchString\fB, const char * \fIfileName\fB);

 \fBint DOODLE_tree_truncate(struct DOODLE_SuffixTree \fI* tree\fB, const char * \fIfileName\fB);

 \fBint DOODLE_tree_dump(FILE * \fIstream\fB, struct DOODLE_SuffixTree \fI* tree\fB);

 \fBint DOODLE_tree_search_approx(struct DOODLE_SuffixTree \fI* tree\fB, const unsigned int \fIapprox\fB, const int \fIignore_case\fB, const unsigned char * \fIss\fB, DOODLE_ResultCallback * \fIcallback\fB, void * \fIarg\fB);

 \fBint DOODLE_tree_search(struct DOODLE_SuffixTree * \fItree\fB, const unsigned char * \fIsubstring\fB, DOODLE_ResultCallback * \fIcallback\fB, void * \fIarg\fB);

.SH "DESCRIPTION"
.P
libdoodle is a library that provides a multi\-suffix tree to lookup files.  The basic use is to create a suffix tree,
add some keywords (associated with a file), search the tree and finally free the tree.  libdoodle features code to
quickly serialize the tree into a compact format.  
.P
In order to use libdoodle, client code first creates a tree (passing a callback function that will log all error messages associated with this tree and the name of the database) using DOODLE_tree_create.  The tree can then be searched using DOODLE_tree_search or DOODLE_tree_search_approx (which requires additional processing with DOODLE_tree_iterate to walk over the individual results).  The tree can be expanded with new search strings (DOODLE_tree_expand) and existing matches can be removed with DOODLE_tree_truncate.  It is only possible to remove all keywords for a given file.  With DOODLE_getFileAt and DOODLE_getFileCount it is possible to inspect the files that are currently in the tree (and to check if their respective modification timestamps, useful for keeping track of when an entry maybe outdated).  Finally the tree must be released using DOODLE_tree_destroy.  This writes the changes to the disk and frees all associated resources.
.P
Example code for using the complete libdoodle API can be found in doodle.c.  If jni.h was found when libdoodle was compiled, libdoodle will contain methods that allow Java code to directly use libdoodle.  See org.gnunet.doodle.Doodle for Java code providing an interface to libdoodle and for a sample main method that demonstrates searching the doodle database from Java.


.SH "SEE ALSO"
doodle(1), extract(1), libextractor(3)

.SH "LEGAL NOTICE"
libdoodle and doodle are released under the GPL.

.SH "BUGS"
There is at least one known bug, but nobody was able to reproduce it yet.  But in general things work fine. :\-)

.SH "REPORTING BUGS"
Report bugs to mantis <https://gnunet.org/bugs/> or by sending electronic mail to <christian@grothoff.org>

.SH "AUTHORS"
doodle was originally written by Christian Grothoff <christian@grothoff.org>.

.SH "AVAILABILITY"
You can obtain the original author's latest version from http://grothoff.org/christian/doodle/.
